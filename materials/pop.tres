[gd_resource type="VisualShader" load_steps=31 format=3 uid="uid://c4f66b083e8fv"]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_jnq15"]
operator = 2

[sub_resource type="VisualShaderNodeCompare" id="VisualShaderNodeCompare_n47dt"]
function = 5

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_v33gd"]
input_name = "lifetime"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_g36bq"]
input_name = "custom"

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_y7ywa"]
default_input_values = [0, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_fj08u"]

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_2vayq"]
function = 19

[sub_resource type="VisualShaderNodeParticleRandomness" id="VisualShaderNodeParticleRandomness_b34uk"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_ae674"]
input_name = "velocity"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_r8s3d"]
parameter_name = "Accel"
default_value_enabled = true
default_value = 2.0

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_2sf3t"]
input_name = "delta"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_lw4i6"]

[sub_resource type="VisualShaderNodeParticleAccelerator" id="VisualShaderNodeParticleAccelerator_8ppnn"]
default_input_values = [0, Vector3(1, 1, 1), 1, 0.0, 2, Vector3(0, 0, 0)]
mode = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_p8y2o"]
input_name = "delta"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_gbbwa"]
input_name = "custom"

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_m8glh"]
default_input_values = [0, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_3mk3c"]

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_rea65"]
op_type = 0

[sub_resource type="VisualShaderNodeParticleRandomness" id="VisualShaderNodeParticleRandomness_exkwx"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_teqkw"]
parameter_name = "MaxInitialVelocity"

[sub_resource type="VisualShaderNodeParticleRingEmitter" id="VisualShaderNodeParticleRingEmitter_67lyr"]
mode_2d = true

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_cwptq"]
parameter_name = "Radius"
default_value_enabled = true
default_value = 20.0

[sub_resource type="VisualShaderNodeVectorFunc" id="VisualShaderNodeVectorFunc_hdbjm"]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_xnuyg"]
operator = 2

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_rdqus"]
parameter_name = "MinInitialVelocity"
default_value_enabled = true
default_value = 10.0

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_rquoi"]
default_input_values = [0, Vector2(0, 0)]
op_type = 0

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_2xuu5"]
operator = 8

[sub_resource type="VisualShaderNodeVec3Constant" id="VisualShaderNodeVec3Constant_5j2x1"]
constant = Vector3(0, 0, 1)

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_2c24d"]
op_type = 0

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_jbd34"]
parameter_name = "LifetimeRandomness"

[resource]
code = "shader_type particles;
uniform float MinInitialVelocity = 10;
uniform float MaxInitialVelocity;
uniform float Radius = 20;
uniform float Accel = 2;
uniform float LifetimeRandomness;


float __rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float __rand_from_seed_m1_p1(inout uint seed) {
	return __rand_from_seed(seed) * 2.0 - 1.0;
}

float __randf_range(inout uint seed, float from, float to) {
	return __rand_from_seed(seed) * (to - from) + from;
}

uint __hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

mat3 __build_rotation_mat3(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat3(vec3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s), vec3(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s), vec3(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c));
}

mat4 __build_rotation_mat4(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat4(vec4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0), vec4(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0), vec4(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0), vec4(0, 0, 0, 1));
}

vec2 __get_random_unit_vec2(inout uint seed) {
	return normalize(vec2(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec3 __get_random_unit_vec3(inout uint seed) {
	return normalize(vec3(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec2 __randv2_range(inout uint seed, vec2 from, vec2 to) {
	return vec2(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y));
}

vec3 __randv3_range(inout uint seed, vec3 from, vec3 to) {
	return vec3(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y), __randf_range(seed, from.z, to.z));
}

vec4 __randv4_range(inout uint seed, vec4 from, vec4 to) {
	return vec4(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y), __randf_range(seed, from.z, to.z), __randf_range(seed, from.w, to.w));
}

vec2 __get_random_point_on_ring2d(inout uint seed, float radius, float inner_radius) {
	float angle = __rand_from_seed(seed) * TAU;
	vec2 ring = vec2(sin(angle), cos(angle)) * __randf_range(seed, inner_radius, radius);
	return vec2(ring.x, ring.y);
}

vec3 __get_random_point_on_ring3d(inout uint seed, float radius, float inner_radius, float height) {
	float angle = __rand_from_seed(seed) * TAU;
	vec2 ring = vec2(sin(angle), cos(angle)) * __randf_range(seed, inner_radius, radius);
	return vec3(ring.x, __randf_range(seed, min(0.0, height), max(0.0, height)), ring.y);
}

void start() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// FloatParameter:6
		float n_out6p0 = MinInitialVelocity;


// FloatParameter:12
		float n_out12p0 = MaxInitialVelocity;


// ParticleRandomness:10
		float n_out10p0 = __randf_range(__seed, n_out6p0, n_out12p0);


// FloatParameter:3
		float n_out3p0 = Radius;


// RingEmitter:2
		float n_in2p2 = 0.00000;
		vec2 n_out2p0 = __get_random_point_on_ring2d(__seed, n_out3p0, n_out3p0);


// VectorFunc:4
		vec3 n_out4p0 = normalize(vec3(n_out2p0, 0.0));


// VectorOp:5
		vec3 n_out5p0 = vec3(n_out10p0) * n_out4p0;


// Vector3Constant:9
		vec3 n_out9p0 = vec3(0.000000, 0.000000, 1.000000);


// VectorDecompose:7
		float n_out7p0 = n_out2p0.x;
		float n_out7p1 = n_out2p0.y;


// FloatOp:8
		float n_out8p0 = atan(n_out7p0, n_out7p1);


// StartOutput:0
		VELOCITY = n_out5p0;
		if (RESTART_POSITION) {
			TRANSFORM = mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(vec3(n_out2p0, 0.0), 1.0));
			if (RESTART_VELOCITY) {
				VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
			}
			TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		}
		TRANSFORM *= __build_rotation_mat4(n_out9p0, n_out8p0);


	}
	
	{
// FloatParameter:3
		float n_out3p0 = LifetimeRandomness;


// VectorCompose:2
		float n_in2p0 = 0.00000;
		vec2 n_out2p0 = vec2(n_in2p0, n_out3p0);


// CustomStartOutput:0
		CUSTOM.rgb = vec3(n_out2p0, 0.0);


	}
}

void process() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// Input:13
		vec4 n_out13p0 = CUSTOM;


// VectorDecompose:14
		float n_out14p0 = vec2(n_out13p0.xy).x;
		float n_out14p1 = vec2(n_out13p0.xy).y;


// Input:12
		float n_out12p0 = LIFETIME;


// FloatFunc:16
		float n_out16p0 = -(n_out14p1);


// ParticleRandomness:17
		float n_out17p0 = __randf_range(__seed, n_out16p0, n_out14p1);


// FloatOp:15
		float n_out15p0 = n_out12p0 + n_out17p0;


// Compare:11
		bool n_out11p0 = n_out14p0 <= n_out15p0;


// Input:2
		vec3 n_out2p0 = VELOCITY;


// FloatParameter:4
		float n_out4p0 = Accel;


// Input:5
		float n_out5p0 = DELTA;


// FloatOp:10
		float n_out10p0 = n_out4p0 * n_out5p0;


		vec3 n_out9p0;
// ParticleAccelerator:9
		float n_in9p1 = 0.00000;
		vec3 n_in9p2 = vec3(0.00000, 0.00000, 0.00000);
		{
			vec3 __diff = TRANSFORM[3].xyz - EMISSION_TRANSFORM[3].xyz;
			vec3 __ndiff = normalize(__diff);

			n_out9p0 = length(__diff) > 0.0 ? __ndiff * vec3(n_out10p0) * mix(1.0, __rand_from_seed(__seed), n_in9p1) : vec3(0.0);
		}


// VectorOp:8
		vec3 n_out8p0 = n_out2p0 + n_out9p0;


// ProcessOutput:0
		ACTIVE = n_out11p0;
		if(ACTIVE) {
			VELOCITY = n_out8p0;
		}


	}
	
	{
// Input:2
		float n_out2p0 = DELTA;


// Input:3
		vec4 n_out3p0 = CUSTOM;


// VectorDecompose:4
		float n_out4p0 = vec2(n_out3p0.xy).x;
		float n_out4p1 = vec2(n_out3p0.xy).y;


// FloatOp:5
		float n_out5p0 = n_out2p0 + n_out4p0;


// VectorCompose:6
		vec2 n_out6p0 = vec2(n_out5p0, n_out4p1);


// CustomProcessOutput:0
		CUSTOM.rgb = vec3(n_out6p0, 0.0);


	}
}

"
mode = 2
flags/collision_use_scale = false
flags/disable_force = false
flags/disable_velocity = false
flags/keep_data = false
nodes/start/0/position = Vector2(800, 1000)
nodes/start/2/node = SubResource("VisualShaderNodeParticleRingEmitter_67lyr")
nodes/start/2/position = Vector2(200, 1200)
nodes/start/3/node = SubResource("VisualShaderNodeFloatParameter_cwptq")
nodes/start/3/position = Vector2(-100, 1200)
nodes/start/4/node = SubResource("VisualShaderNodeVectorFunc_hdbjm")
nodes/start/4/position = Vector2(400, 1000)
nodes/start/5/node = SubResource("VisualShaderNodeVectorOp_xnuyg")
nodes/start/5/position = Vector2(600, 1000)
nodes/start/6/node = SubResource("VisualShaderNodeFloatParameter_rdqus")
nodes/start/6/position = Vector2(0, 800)
nodes/start/7/node = SubResource("VisualShaderNodeVectorDecompose_rquoi")
nodes/start/7/position = Vector2(400, 1400)
nodes/start/8/node = SubResource("VisualShaderNodeFloatOp_2xuu5")
nodes/start/8/position = Vector2(600, 1400)
nodes/start/9/node = SubResource("VisualShaderNodeVec3Constant_5j2x1")
nodes/start/9/position = Vector2(400, 1200)
nodes/start/10/node = SubResource("VisualShaderNodeParticleRandomness_exkwx")
nodes/start/10/position = Vector2(300, 800)
nodes/start/12/node = SubResource("VisualShaderNodeFloatParameter_teqkw")
nodes/start/12/position = Vector2(0, 1000)
nodes/start/connections = PackedInt32Array(2, 0, 0, 4, 3, 0, 2, 0, 3, 0, 2, 1, 2, 0, 4, 0, 4, 0, 5, 1, 5, 0, 0, 1, 2, 0, 7, 0, 8, 0, 0, 7, 9, 0, 0, 6, 7, 0, 8, 0, 7, 1, 8, 1, 12, 0, 10, 2, 10, 0, 5, 0, 6, 0, 10, 1)
nodes/process/0/position = Vector2(400, 200)
nodes/process/2/node = SubResource("VisualShaderNodeInput_ae674")
nodes/process/2/position = Vector2(-600, 200)
nodes/process/4/node = SubResource("VisualShaderNodeFloatParameter_r8s3d")
nodes/process/4/position = Vector2(-600, 300)
nodes/process/5/node = SubResource("VisualShaderNodeInput_2sf3t")
nodes/process/5/position = Vector2(-600, 600)
nodes/process/8/node = SubResource("VisualShaderNodeVectorOp_lw4i6")
nodes/process/8/position = Vector2(200, 200)
nodes/process/9/node = SubResource("VisualShaderNodeParticleAccelerator_8ppnn")
nodes/process/9/position = Vector2(-20, 400)
nodes/process/10/node = SubResource("VisualShaderNodeFloatOp_jnq15")
nodes/process/10/position = Vector2(-240, 460)
nodes/process/11/node = SubResource("VisualShaderNodeCompare_n47dt")
nodes/process/11/position = Vector2(200, 0)
nodes/process/12/node = SubResource("VisualShaderNodeInput_v33gd")
nodes/process/12/position = Vector2(-300, 0)
nodes/process/13/node = SubResource("VisualShaderNodeInput_g36bq")
nodes/process/13/position = Vector2(-1000, 0)
nodes/process/14/node = SubResource("VisualShaderNodeVectorDecompose_y7ywa")
nodes/process/14/position = Vector2(-700, 0)
nodes/process/15/node = SubResource("VisualShaderNodeFloatOp_fj08u")
nodes/process/15/position = Vector2(0, 100)
nodes/process/16/node = SubResource("VisualShaderNodeFloatFunc_2vayq")
nodes/process/16/position = Vector2(-500, 0)
nodes/process/17/node = SubResource("VisualShaderNodeParticleRandomness_b34uk")
nodes/process/17/position = Vector2(-300, 100)
nodes/process/connections = PackedInt32Array(2, 0, 8, 0, 8, 0, 0, 1, 9, 0, 8, 1, 5, 0, 10, 1, 4, 0, 10, 0, 10, 0, 9, 0, 11, 0, 0, 0, 13, 0, 14, 0, 14, 0, 11, 0, 14, 1, 16, 0, 14, 1, 17, 2, 16, 0, 17, 1, 12, 0, 15, 0, 17, 0, 15, 1, 15, 0, 11, 1)
nodes/start_custom/0/position = Vector2(400, 200)
nodes/start_custom/2/node = SubResource("VisualShaderNodeVectorCompose_2c24d")
nodes/start_custom/2/position = Vector2(200, 200)
nodes/start_custom/3/node = SubResource("VisualShaderNodeFloatParameter_jbd34")
nodes/start_custom/3/position = Vector2(-100, 200)
nodes/start_custom/connections = PackedInt32Array(3, 0, 2, 1, 2, 0, 0, 0)
nodes/process_custom/2/node = SubResource("VisualShaderNodeInput_p8y2o")
nodes/process_custom/2/position = Vector2(-480, 120)
nodes/process_custom/3/node = SubResource("VisualShaderNodeInput_gbbwa")
nodes/process_custom/3/position = Vector2(-640, 280)
nodes/process_custom/4/node = SubResource("VisualShaderNodeVectorDecompose_m8glh")
nodes/process_custom/4/position = Vector2(-360, 260)
nodes/process_custom/5/node = SubResource("VisualShaderNodeFloatOp_3mk3c")
nodes/process_custom/5/position = Vector2(-160, 220)
nodes/process_custom/6/node = SubResource("VisualShaderNodeVectorCompose_rea65")
nodes/process_custom/6/position = Vector2(40, 260)
nodes/process_custom/connections = PackedInt32Array(3, 0, 4, 0, 2, 0, 5, 0, 4, 0, 5, 1, 5, 0, 6, 0, 4, 1, 6, 1, 6, 0, 0, 0)
